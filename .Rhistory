shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
toString(1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
createVerb()
createStatement(list(verb = list(display = "experienced")))
runApp()
.rs.restartR()
boastUtils::getCurrentAddress()
runApp()
runApp()
.rs.restartR()
runApp()
runApp()
.rs.restartR()
runApp()
createObject(list())
createObject(list(definition = ""))
createObject(list(definition = list(name = ""))
)
createObject(list(name = ""))
createObject(list(name = "", description = ""))
createObject(list(id = "#123", name = "", description = ""))
runApp()
runApp()
runApp()
tools
library(tools)
tools
toTitleCase("hi")
detach("package:tools", unload = TRUE)
toTitleCase("hi")
.rs.restartR()
toTitleCase('hi')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getInteractionTypes()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
createResult(list(success = TRUE))
runApp()
createResult(result = list(success = TRUE, response = "valid answer"))
createStatement(createResult(result = list(success = TRUE, response = "valid answer")))
createStatement(list(result = createResult(result = list(success = TRUE, response = "valid answer"))))
createStatement(list(result = createResult(list(success = TRUE, response = "valid answer"))))
createStatement(list(result = createResult(list(success = TRUE, response = "valid answer", correctResponsePattern = "test"))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.rs.restartR()
rlocker::createResult
rlocker::createResult()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste(c(1,2), collapse = "")
runApp()
matrix(
data = rep.int(0, times = TILE_COUNT),
nrow = GRID_SIZE,
ncol = GRID_SIZE
)
matrix(
data = rep.int(0, times = 9),
nrow = 3,
ncol = 3
)
a <- matrix(
data = rep.int(0, times = 9),
nrow = 3,
ncol = 3
)
paste(a)
as.data.frame(a)
paste(as.data.frame(a))
runApp()
runApp()
runApp()
runApp()
runApp()
createVerb(verb = list(id = "completed"))
createVerb(verb = list(id = "completed", display = "completed"))
runApp()
.rs.restartR()
runApp()
runApp()
runApp()
runApp()
runApp()
remove.packages("boastUtils")
install_github("EducationShinyAppTeam/boastUtils")
library(devtools)
install_github("EducationShinyAppTeam/boastUtils")
install_github("EducationShinyAppTeam/boastUtils")
install.packages(c("boot", "caTools", "clipr", "data.table", "devtools", "forecast", "foreign", "ggformula", "ggstance", "git2r", "hexbin", "htmlwidgets", "jpeg", "KernSmooth", "leaflet", "learnr", "Matrix", "mgcv", "nlme", "pkgconfig", "plotly", "quadprog", "raster", "RcppArmadillo", "RgoogleMaps", "rmarkdown", "roxygen2", "scales", "shinyAce", "shinyWidgets", "sp", "survival", "tinytex", "TTR", "usethis", "whisker"))
.rs.restartR()
library(devtools)
install_github("EducationShinyAppTeam/boastUtils")
runApp()
runApp()
library(rsconnect)
rsconnect::deployApp()
rsconnect::deployApp()
.rs.restartR()
runApp()
.rs.restartR()
runApp()
runApp()
.rs.restartR()
runApp()
runApp()
.rs.restartR()
runApp()
.rs.restartR()
runApp()
.rs.restartR()
runApp()
.rs.restartR()
runApp()
.rs.restartR()
runApp()
install_github("EducationShinyAppTeam/boastUtils")
runApp()
.rs.restartR()
runApp()
rsconnect::deployApp()
rsconnect::deployApp(appName = "Hypothesis_Testing_Game")
rsconnect::deployApp(appName = "Hypothesis_Testing_Game")
shiny::runApp()
install.packages(c("shinyalert", "shinyWidgets"))
runApp()
